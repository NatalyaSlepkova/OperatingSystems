// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReliableMessage.proto

#ifndef PROTOBUF_ReliableMessage_2eproto_INCLUDED
#define PROTOBUF_ReliableMessage_2eproto_INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ReliableMessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsReliableMessageImpl();
void InitDefaultsReliableMessage();
inline void InitDefaults() {
  InitDefaultsReliableMessage();
}
}  // namespace protobuf_ReliableMessage_2eproto
class ReliableMessage;
class ReliableMessageDefaultTypeInternal;
extern ReliableMessageDefaultTypeInternal _ReliableMessage_default_instance_;
namespace google {
namespace protobuf {
template<> ::ReliableMessage* Arena::Create< ::ReliableMessage>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class ReliableMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ReliableMessage) */ {
 public:
  ReliableMessage();
  virtual ~ReliableMessage();

  ReliableMessage(const ReliableMessage& from);

  inline ReliableMessage& operator=(const ReliableMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReliableMessage(ReliableMessage&& from) noexcept
    : ReliableMessage() {
    *this = ::std::move(from);
  }

  inline ReliableMessage& operator=(ReliableMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReliableMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReliableMessage* internal_default_instance() {
    return reinterpret_cast<const ReliableMessage*>(
               &_ReliableMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ReliableMessage* other);
  friend void swap(ReliableMessage& a, ReliableMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReliableMessage* New() const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReliableMessage>(NULL);
  }

  ReliableMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL {
    return ::google::protobuf::Arena::Create<ReliableMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReliableMessage& from);
  void MergeFrom(const ReliableMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReliableMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes payload = 5;
  void clear_payload();
  static const int kPayloadFieldNumber = 5;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  #if LANG_CXX11
  void set_payload(::std::string&& value);
  #endif
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // uint32 protocol_id = 1;
  void clear_protocol_id();
  static const int kProtocolIdFieldNumber = 1;
  ::google::protobuf::uint32 protocol_id() const;
  void set_protocol_id(::google::protobuf::uint32 value);

  // uint32 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::uint32 sequence() const;
  void set_sequence(::google::protobuf::uint32 value);

  // uint32 ack = 3;
  void clear_ack();
  static const int kAckFieldNumber = 3;
  ::google::protobuf::uint32 ack() const;
  void set_ack(::google::protobuf::uint32 value);

  // uint32 ack_bitmask = 4;
  void clear_ack_bitmask();
  static const int kAckBitmaskFieldNumber = 4;
  ::google::protobuf::uint32 ack_bitmask() const;
  void set_ack_bitmask(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ReliableMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  ::google::protobuf::uint32 protocol_id_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::uint32 ack_;
  ::google::protobuf::uint32 ack_bitmask_;
  mutable int _cached_size_;
  friend struct ::protobuf_ReliableMessage_2eproto::TableStruct;
  friend void ::protobuf_ReliableMessage_2eproto::InitDefaultsReliableMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReliableMessage

// uint32 protocol_id = 1;
inline void ReliableMessage::clear_protocol_id() {
  protocol_id_ = 0u;
}
inline ::google::protobuf::uint32 ReliableMessage::protocol_id() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.protocol_id)
  return protocol_id_;
}
inline void ReliableMessage::set_protocol_id(::google::protobuf::uint32 value) {
  
  protocol_id_ = value;
  // @@protoc_insertion_point(field_set:ReliableMessage.protocol_id)
}

// uint32 sequence = 2;
inline void ReliableMessage::clear_sequence() {
  sequence_ = 0u;
}
inline ::google::protobuf::uint32 ReliableMessage::sequence() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.sequence)
  return sequence_;
}
inline void ReliableMessage::set_sequence(::google::protobuf::uint32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:ReliableMessage.sequence)
}

// uint32 ack = 3;
inline void ReliableMessage::clear_ack() {
  ack_ = 0u;
}
inline ::google::protobuf::uint32 ReliableMessage::ack() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.ack)
  return ack_;
}
inline void ReliableMessage::set_ack(::google::protobuf::uint32 value) {
  
  ack_ = value;
  // @@protoc_insertion_point(field_set:ReliableMessage.ack)
}

// uint32 ack_bitmask = 4;
inline void ReliableMessage::clear_ack_bitmask() {
  ack_bitmask_ = 0u;
}
inline ::google::protobuf::uint32 ReliableMessage::ack_bitmask() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.ack_bitmask)
  return ack_bitmask_;
}
inline void ReliableMessage::set_ack_bitmask(::google::protobuf::uint32 value) {
  
  ack_bitmask_ = value;
  // @@protoc_insertion_point(field_set:ReliableMessage.ack_bitmask)
}

// bytes payload = 5;
inline void ReliableMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReliableMessage::payload() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.payload)
  return payload_.GetNoArena();
}
inline void ReliableMessage::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReliableMessage.payload)
}
#if LANG_CXX11
inline void ReliableMessage::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReliableMessage.payload)
}
#endif
inline void ReliableMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReliableMessage.payload)
}
inline void ReliableMessage::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReliableMessage.payload)
}
inline ::std::string* ReliableMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:ReliableMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReliableMessage::release_payload() {
  // @@protoc_insertion_point(field_release:ReliableMessage.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReliableMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:ReliableMessage.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ReliableMessage_2eproto_INCLUDED
