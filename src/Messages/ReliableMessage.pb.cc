// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReliableMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ReliableMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class ReliableMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ReliableMessage> {
} _ReliableMessage_default_instance_;

namespace protobuf_ReliableMessage_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliableMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliableMessage, protocolid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliableMessage, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliableMessage, ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliableMessage, ackbitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReliableMessage, payload_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ReliableMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReliableMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ReliableMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _ReliableMessage_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ReliableMessage_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\025ReliableMessage.proto\"i\n\017ReliableMessa"
      "ge\022\022\n\nprotocolId\030\001 \001(\r\022\020\n\010sequence\030\002 \001(\r"
      "\022\013\n\003ack\030\003 \001(\r\022\022\n\nackBitmask\030\004 \001(\r\022\017\n\007pay"
      "load\030\005 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ReliableMessage.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_ReliableMessage_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReliableMessage::kProtocolIdFieldNumber;
const int ReliableMessage::kSequenceFieldNumber;
const int ReliableMessage::kAckFieldNumber;
const int ReliableMessage::kAckBitmaskFieldNumber;
const int ReliableMessage::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReliableMessage::ReliableMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_ReliableMessage_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReliableMessage)
}
ReliableMessage::ReliableMessage(const ReliableMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&protocolid_, &from.protocolid_,
    reinterpret_cast<char*>(&ackbitmask_) -
    reinterpret_cast<char*>(&protocolid_) + sizeof(ackbitmask_));
  // @@protoc_insertion_point(copy_constructor:ReliableMessage)
}

void ReliableMessage::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolid_, 0, reinterpret_cast<char*>(&ackbitmask_) -
    reinterpret_cast<char*>(&protocolid_) + sizeof(ackbitmask_));
  _cached_size_ = 0;
}

ReliableMessage::~ReliableMessage() {
  // @@protoc_insertion_point(destructor:ReliableMessage)
  SharedDtor();
}

void ReliableMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReliableMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReliableMessage::descriptor() {
  protobuf_ReliableMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ReliableMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReliableMessage& ReliableMessage::default_instance() {
  protobuf_ReliableMessage_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReliableMessage* ReliableMessage::New(::google::protobuf::Arena* arena) const {
  ReliableMessage* n = new ReliableMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReliableMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReliableMessage)
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocolid_, 0, reinterpret_cast<char*>(&ackbitmask_) -
    reinterpret_cast<char*>(&protocolid_) + sizeof(ackbitmask_));
}

bool ReliableMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReliableMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 protocolId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ackBitmask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ackbitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReliableMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReliableMessage)
  return false;
#undef DO_
}

void ReliableMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReliableMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protocolId = 1;
  if (this->protocolid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocolid(), output);
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // uint32 ack = 3;
  if (this->ack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ack(), output);
  }

  // uint32 ackBitmask = 4;
  if (this->ackbitmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ackbitmask(), output);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->payload(), output);
  }

  // @@protoc_insertion_point(serialize_end:ReliableMessage)
}

::google::protobuf::uint8* ReliableMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReliableMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protocolId = 1;
  if (this->protocolid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocolid(), target);
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // uint32 ack = 3;
  if (this->ack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ack(), target);
  }

  // uint32 ackBitmask = 4;
  if (this->ackbitmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ackbitmask(), target);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->payload(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ReliableMessage)
  return target;
}

size_t ReliableMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReliableMessage)
  size_t total_size = 0;

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // uint32 protocolId = 1;
  if (this->protocolid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocolid());
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence());
  }

  // uint32 ack = 3;
  if (this->ack() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ack());
  }

  // uint32 ackBitmask = 4;
  if (this->ackbitmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ackbitmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReliableMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReliableMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReliableMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReliableMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReliableMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReliableMessage)
    MergeFrom(*source);
  }
}

void ReliableMessage::MergeFrom(const ReliableMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReliableMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.protocolid() != 0) {
    set_protocolid(from.protocolid());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.ack() != 0) {
    set_ack(from.ack());
  }
  if (from.ackbitmask() != 0) {
    set_ackbitmask(from.ackbitmask());
  }
}

void ReliableMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReliableMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReliableMessage::CopyFrom(const ReliableMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReliableMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReliableMessage::IsInitialized() const {
  return true;
}

void ReliableMessage::Swap(ReliableMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReliableMessage::InternalSwap(ReliableMessage* other) {
  payload_.Swap(&other->payload_);
  std::swap(protocolid_, other->protocolid_);
  std::swap(sequence_, other->sequence_);
  std::swap(ack_, other->ack_);
  std::swap(ackbitmask_, other->ackbitmask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReliableMessage::GetMetadata() const {
  protobuf_ReliableMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ReliableMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReliableMessage

// uint32 protocolId = 1;
void ReliableMessage::clear_protocolid() {
  protocolid_ = 0u;
}
::google::protobuf::uint32 ReliableMessage::protocolid() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.protocolId)
  return protocolid_;
}
void ReliableMessage::set_protocolid(::google::protobuf::uint32 value) {
  
  protocolid_ = value;
  // @@protoc_insertion_point(field_set:ReliableMessage.protocolId)
}

// uint32 sequence = 2;
void ReliableMessage::clear_sequence() {
  sequence_ = 0u;
}
::google::protobuf::uint32 ReliableMessage::sequence() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.sequence)
  return sequence_;
}
void ReliableMessage::set_sequence(::google::protobuf::uint32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:ReliableMessage.sequence)
}

// uint32 ack = 3;
void ReliableMessage::clear_ack() {
  ack_ = 0u;
}
::google::protobuf::uint32 ReliableMessage::ack() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.ack)
  return ack_;
}
void ReliableMessage::set_ack(::google::protobuf::uint32 value) {
  
  ack_ = value;
  // @@protoc_insertion_point(field_set:ReliableMessage.ack)
}

// uint32 ackBitmask = 4;
void ReliableMessage::clear_ackbitmask() {
  ackbitmask_ = 0u;
}
::google::protobuf::uint32 ReliableMessage::ackbitmask() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.ackBitmask)
  return ackbitmask_;
}
void ReliableMessage::set_ackbitmask(::google::protobuf::uint32 value) {
  
  ackbitmask_ = value;
  // @@protoc_insertion_point(field_set:ReliableMessage.ackBitmask)
}

// bytes payload = 5;
void ReliableMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ReliableMessage::payload() const {
  // @@protoc_insertion_point(field_get:ReliableMessage.payload)
  return payload_.GetNoArena();
}
void ReliableMessage::set_payload(const ::std::string& value) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReliableMessage.payload)
}
#if LANG_CXX11
void ReliableMessage::set_payload(::std::string&& value) {
  
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReliableMessage.payload)
}
#endif
void ReliableMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReliableMessage.payload)
}
void ReliableMessage::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReliableMessage.payload)
}
::std::string* ReliableMessage::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:ReliableMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReliableMessage::release_payload() {
  // @@protoc_insertion_point(field_release:ReliableMessage.payload)
  
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReliableMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:ReliableMessage.payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
