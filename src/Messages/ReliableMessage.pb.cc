// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ReliableMessage.proto

#include "ReliableMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class ReliableMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReliableMessage>
      _instance;
} _ReliableMessage_default_instance_;
namespace protobuf_ReliableMessage_2eproto {
void InitDefaultsReliableMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_ReliableMessage_default_instance_;
    new (ptr) ::ReliableMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReliableMessage::InitAsDefaultInstance();
}

void InitDefaultsReliableMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReliableMessageImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReliableMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReliableMessage, protocol_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReliableMessage, sequence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReliableMessage, ack_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReliableMessage, ack_bitmask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ReliableMessage, payload_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ReliableMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_ReliableMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "ReliableMessage.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\025ReliableMessage.proto\"k\n\017ReliableMessa"
      "ge\022\023\n\013protocol_id\030\001 \001(\r\022\020\n\010sequence\030\002 \001("
      "\r\022\013\n\003ack\030\003 \001(\r\022\023\n\013ack_bitmask\030\004 \001(\r\022\017\n\007p"
      "ayload\030\005 \001(\014b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 140);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ReliableMessage.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ReliableMessage_2eproto

// ===================================================================

void ReliableMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReliableMessage::kProtocolIdFieldNumber;
const int ReliableMessage::kSequenceFieldNumber;
const int ReliableMessage::kAckFieldNumber;
const int ReliableMessage::kAckBitmaskFieldNumber;
const int ReliableMessage::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReliableMessage::ReliableMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_ReliableMessage_2eproto::InitDefaultsReliableMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReliableMessage)
}
ReliableMessage::ReliableMessage(const ReliableMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  ::memcpy(&protocol_id_, &from.protocol_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ack_bitmask_) -
    reinterpret_cast<char*>(&protocol_id_)) + sizeof(ack_bitmask_));
  // @@protoc_insertion_point(copy_constructor:ReliableMessage)
}

void ReliableMessage::SharedCtor() {
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_bitmask_) -
      reinterpret_cast<char*>(&protocol_id_)) + sizeof(ack_bitmask_));
  _cached_size_ = 0;
}

ReliableMessage::~ReliableMessage() {
  // @@protoc_insertion_point(destructor:ReliableMessage)
  SharedDtor();
}

void ReliableMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReliableMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReliableMessage::descriptor() {
  ::protobuf_ReliableMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ReliableMessage_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReliableMessage& ReliableMessage::default_instance() {
  ::protobuf_ReliableMessage_2eproto::InitDefaultsReliableMessage();
  return *internal_default_instance();
}


void ReliableMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ReliableMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ack_bitmask_) -
      reinterpret_cast<char*>(&protocol_id_)) + sizeof(ack_bitmask_));
  _internal_metadata_.Clear();
}

bool ReliableMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReliableMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 protocol_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &protocol_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sequence = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ack = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 ack_bitmask = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ack_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes payload = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReliableMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReliableMessage)
  return false;
#undef DO_
}

void ReliableMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReliableMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protocol_id = 1;
  if (this->protocol_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->protocol_id(), output);
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  // uint32 ack = 3;
  if (this->ack() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ack(), output);
  }

  // uint32 ack_bitmask = 4;
  if (this->ack_bitmask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ack_bitmask(), output);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->payload(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ReliableMessage)
}

::google::protobuf::uint8* ReliableMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReliableMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 protocol_id = 1;
  if (this->protocol_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->protocol_id(), target);
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  // uint32 ack = 3;
  if (this->ack() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ack(), target);
  }

  // uint32 ack_bitmask = 4;
  if (this->ack_bitmask() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ack_bitmask(), target);
  }

  // bytes payload = 5;
  if (this->payload().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->payload(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReliableMessage)
  return target;
}

size_t ReliableMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReliableMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes payload = 5;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // uint32 protocol_id = 1;
  if (this->protocol_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->protocol_id());
  }

  // uint32 sequence = 2;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sequence());
  }

  // uint32 ack = 3;
  if (this->ack() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ack());
  }

  // uint32 ack_bitmask = 4;
  if (this->ack_bitmask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ack_bitmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReliableMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReliableMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReliableMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReliableMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReliableMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReliableMessage)
    MergeFrom(*source);
  }
}

void ReliableMessage::MergeFrom(const ReliableMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReliableMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.payload().size() > 0) {

    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  if (from.protocol_id() != 0) {
    set_protocol_id(from.protocol_id());
  }
  if (from.sequence() != 0) {
    set_sequence(from.sequence());
  }
  if (from.ack() != 0) {
    set_ack(from.ack());
  }
  if (from.ack_bitmask() != 0) {
    set_ack_bitmask(from.ack_bitmask());
  }
}

void ReliableMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReliableMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReliableMessage::CopyFrom(const ReliableMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReliableMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReliableMessage::IsInitialized() const {
  return true;
}

void ReliableMessage::Swap(ReliableMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReliableMessage::InternalSwap(ReliableMessage* other) {
  using std::swap;
  payload_.Swap(&other->payload_);
  swap(protocol_id_, other->protocol_id_);
  swap(sequence_, other->sequence_);
  swap(ack_, other->ack_);
  swap(ack_bitmask_, other->ack_bitmask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReliableMessage::GetMetadata() const {
  protobuf_ReliableMessage_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ReliableMessage_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ReliableMessage* Arena::Create< ::ReliableMessage >(Arena* arena) {
  return Arena::CreateInternal< ::ReliableMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
